import {element, browser, $, by, $$, protractor} from 'protractor';
import { AppPage } from '../app.po';
import { Invoices } from './invoices.po';
import { Entity } from '../entitySearch/EntitySearch.po';
import { PaymentSearch } from '../payment/paymentSearch.po';
const data = require('../app.e2e-test_data.json');
const testEnv = browser.params.environment.env;
const userType = browser.params.user_type.isExternal;

describe('iReceivable Invoices Page : Advanced Search - ', () => {
    let app: AppPage;
    let inv: Invoices;
    let paysrc: PaymentSearch;
    let ent: Entity;
    const sortasc = $('span.k-icon.k-i-sort-asc-sm');
    const sortdesc = $('span.k-icon.k-i-sort-desc-sm');
    beforeAll(async () => {
        app = new AppPage();
        inv = new Invoices();
        paysrc = new PaymentSearch ();
        ent = new Entity();
        await app.appLogin(testEnv, userType);
        await app.waitForUrlToChangeTo('dashboard');
        await app.cancelCustomerOrInvoice();
        await app.waitForMainLoader();
        const linkPayment = element(by.linkText('INVOICES'));
        await inv.clickonInvoiceTab();
        console.log('before all completed.');
    });
    afterAll(async () => {
        await app.appLogout();
        });
    beforeEach(async () => {
        await browser.sleep(3000);
        });

    it('Should search Invoices using Entity# in Advance Search', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        expect(await $('[placeholder="Entity#"]').isDisplayed()).toBeTruthy();
        await inv.SearchEntity(inv.readExcelInv(0, 'B2'));
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await $('kendo-pager-page-sizes.k-pager-sizes.k-label').isDisplayed()).toBeTruthy();
        expect(await $('div.k-grid-aria-root').isDisplayed()).toBeTruthy();
        await paysrc.clickOnClearAll();
    });
    it('should search Entity by Dont Know Entity#? link and able to Search Entity Name by Exact value', async () => {
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        // ************************************
        const dontKnowEntity = await element(by.xpath('//div[@id="invoice-csc-adv-entity"]/a'));
        await app.waitForEcClickable(dontKnowEntity);
        await element(by.xpath('//div[@id="invoice-csc-adv-entity"]/a')).click();
        const searchEntityNamePopup = await $('[placeholder="Type the Entity name"]');
        await app.waitForEcVisible(searchEntityNamePopup);
        // verify dont know popup
        expect(await $('div.k-window-title.k-dialog-title').getText()).toBe(data.EntitySearch.SearchEntity);
        expect(await element(by.xpath('//h3[contains(text(),"Entity Name")]')).getText()).toContain(data.EntitySearch.EntityNameCol);
        expect(await $$('label.k-radio-label.entity-radio-label').get(0).getText()).toBe(data.EntitySearch.BeginWith);
        expect(await $$('label.k-radio-label.entity-radio-label').get(1).getText()).toBe(data.EntitySearch.Contains);
        expect(await $$('label.k-radio-label.entity-radio-label').get(2).getText()).toBe(data.EntitySearch.Exact);

        await $('[placeholder="Type the Entity name"]').sendKeys(inv.readExcelInv(0, 'B24'));
        const SearchButtonPopup = await $('#dontKnow-search-button');
        await app.waitForEcClickable(SearchButtonPopup);
        await SearchButtonPopup.click();
        await app.waitForMainLoader();
        await browser.sleep(3000);
        await ent.selectEntity();
        const selectButton = await element(by.buttonText('SELECT'));
        await app.waitForEcClickable(selectButton);
        await ent.clickSelectButton();
        const searchButton = await element(by.buttonText('Search'));
        await app.waitForEcClickable(searchButton);
        await ent.clickSearchButton();
        await app.waitForMainLoader();
        const EntityResult = await $$('a.k-link').get(0);
        await app.waitForEcVisible(EntityResult);
        await expect((EntityResult).isDisplayed()).toBeTruthy();
    });
    it('should search Entity by Dont Know Entity link and able to Search Entity Name by Contains value', async () => {
        // await inv.clickonInvoiceStatusDropdown();
        // await browser.sleep(1000);
        // await inv.clickonInvoiceStatusDropdownAll();
        // const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        // await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        // ************************************
        const dontKnowEntity = await element(by.xpath('//div[@id="invoice-csc-adv-entity"]/a'));
        await app.waitForEcClickable(dontKnowEntity);
        await element(by.xpath('//div[@id="invoice-csc-adv-entity"]/a')).click();
        const searchEntityNamePopup = await $('[placeholder="Type the Entity name"]');
        await app.waitForEcVisible(searchEntityNamePopup);
        // verify dont know popup
        expect(await $('div.k-window-title.k-dialog-title').getText()).toBe(data.EntitySearch.SearchEntity);
        expect(await element(by.xpath('//h3[contains(text(),"Entity Name")]')).getText()).toContain(data.EntitySearch.EntityNameCol);
        expect(await $$('label.k-radio-label.entity-radio-label').get(0).getText()).toBe(data.EntitySearch.BeginWith);
        expect(await $$('label.k-radio-label.entity-radio-label').get(1).getText()).toBe(data.EntitySearch.Contains);
        expect(await $$('label.k-radio-label.entity-radio-label').get(2).getText()).toBe(data.EntitySearch.Exact);
        const containsRadioButton = await $$('label.k-radio-label.entity-radio-label').get(1);
        await containsRadioButton.click();
        await $('[placeholder="Type the Entity name"]').sendKeys(inv.readExcelInv(0, 'B23'));
        const SearchButtonPopup = await $('#dontKnow-search-button');
        await app.waitForEcClickable(SearchButtonPopup);
        await SearchButtonPopup.click();
        await app.waitForMainLoader();
        await browser.sleep(3000);
        await ent.selectEntity();
        const selectButton = await element(by.buttonText('SELECT'));
        await app.waitForEcClickable(selectButton);
        await ent.clickSelectButton();
        const searchButton = await element(by.buttonText('Search'));
        await app.waitForEcClickable(searchButton);
        await ent.clickSearchButton();
        await app.waitForMainLoader();
        const EntityResult = await $$('a.k-link').get(0);
        await app.waitForEcVisible(EntityResult);
        await expect((EntityResult).isDisplayed()).toBeTruthy();
    });
    it('should search Entity by Dont Know Entity link and able to Search Entity Name by Begins With value', async () => {
        // await inv.clickonInvoiceStatusDropdown();
        // await browser.sleep(1000);
        // await inv.clickonInvoiceStatusDropdownAll();
        // const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        // await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        // ************************************
        const dontKnowEntity = await element(by.xpath('//div[@id="invoice-csc-adv-entity"]/a'));
        await app.waitForEcClickable(dontKnowEntity);
        await element(by.xpath('//div[@id="invoice-csc-adv-entity"]/a')).click();
        const searchEntityNamePopup = await $('[placeholder="Type the Entity name"]');
        await app.waitForEcVisible(searchEntityNamePopup);
        // verify dont know popup
        expect(await $('div.k-window-title.k-dialog-title').getText()).toBe(data.EntitySearch.SearchEntity);
        expect(await element(by.xpath('//h3[contains(text(),"Entity Name")]')).getText()).toContain(data.EntitySearch.EntityNameCol);
        expect(await $$('label.k-radio-label.entity-radio-label').get(0).getText()).toBe(data.EntitySearch.BeginWith);
        expect(await $$('label.k-radio-label.entity-radio-label').get(1).getText()).toBe(data.EntitySearch.Contains);
        expect(await $$('label.k-radio-label.entity-radio-label').get(2).getText()).toBe(data.EntitySearch.Exact);
        const containsRadioButton = await $$('label.k-radio-label.entity-radio-label').get(0);
        await containsRadioButton.click();
        await $('[placeholder="Type the Entity name"]').sendKeys(inv.readExcelInv(0, 'B22'));
        const SearchButtonPopup = await $('#dontKnow-search-button');
        await app.waitForEcClickable(SearchButtonPopup);
        await SearchButtonPopup.click();
        await app.waitForMainLoader();
        await browser.sleep(3000);
        await ent.selectEntity();
        const selectButton = await element(by.buttonText('SELECT'));
        await app.waitForEcClickable(selectButton);
        await ent.clickSelectButton();
        const searchButton = await element(by.buttonText('Search'));
        await app.waitForEcClickable(searchButton);
        await ent.clickSearchButton();
        await app.waitForMainLoader();
        const EntityResult = await $$('a.k-link').get(0);
        await app.waitForEcVisible(EntityResult);
        await expect((EntityResult).isDisplayed()).toBeTruthy();
    });
    it('Should Search Invoices using Project Ref in Advance Search Options', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B9'));
        await app.waitForMainLoader();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        expect(await $('[placeholder="Project Ref"]').isDisplayed()).toBeTruthy();
        await inv.ProjectRef(inv.readExcelInv(0, 'B10'));
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await $('kendo-pager-page-sizes.k-pager-sizes.k-label').isDisplayed()).toBeTruthy();
        expect(await $('div.k-grid-aria-root').isDisplayed()).toBeTruthy();
        await paysrc.clickOnClearAll();

    });
    it('Should Search Invoices using Matter Ref and Search option as Begins With', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B20'));
        await app.waitForMainLoader();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        await browser.sleep(1000);
        expect(await $('[placeholder="Matter Ref"]').isDisplayed()).toBeTruthy();
        await inv.clickMatterRefBeginRadioBtn();
        await browser.sleep(1000);
        await inv.MatterRef(inv.readExcelInv(0, 'B4'));
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await $('kendo-pager-page-sizes.k-pager-sizes.k-label').isDisplayed()).toBeTruthy();
        await browser.executeScript('window.scrollTo(0,200)');
        const MatterRef = await(element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[13]/div/span[2]')).getText());
        console.log('MatterRef Selected :: ', MatterRef);
        expect(await element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[13]/div/span[2]')).getText()).toContain(MatterRef);
        await browser.executeScript('window.scrollTo(0,0)');
        await paysrc.clickOnClearAll();
    });
    it('Should Search Invoices using Matter Ref and Search option as Contains', async () => {
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        await browser.sleep(1000);
        expect(await $('[placeholder="Matter Ref"]').isDisplayed()).toBeTruthy();
        await inv.clickMatterRefContainsRadioBtn();
        await browser.sleep(1000);
        await inv.MatterRef(inv.readExcelInv(0, 'B4'));
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await $('kendo-pager-page-sizes.k-pager-sizes.k-label').isDisplayed()).toBeTruthy();
        await browser.executeScript('window.scrollTo(0,200)');
        const MatterRef = await(element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[13]/div/span[2]')).getText());
        console.log('MatterRef Selected :: ', MatterRef);
        expect(await element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[13]/div/span[2]')).getText()).toContain(MatterRef);
        await browser.executeScript('window.scrollTo(0,0)');
        await paysrc.clickOnClearAll();

    });
    it('Should Search Invoices using Matter Ref and Search option as exact', async () => {
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        await browser.sleep(1000);
        expect(await $('[placeholder="Matter Ref"]').isDisplayed()).toBeTruthy();
        await inv.clickMatterRefExactRadioBtn();
        await browser.sleep(1000);
        await inv.MatterRef(inv.readExcelInv(0, 'B5'));
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await $('kendo-pager-page-sizes.k-pager-sizes.k-label').isDisplayed()).toBeTruthy();
        await browser.executeScript('window.scrollTo(0,200)');
        const MatterRef = await(element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[13]/div/span[2]')).getText());
        console.log('MatterRef Selected :: ', MatterRef);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[13]/div/span[2]')).getAttribute('title')).toContain(MatterRef);
        await browser.executeScript('window.scrollTo(0,0)');
        await paysrc.clickOnClearAll();
    });
    it('Should Search Invoices using Summarized Invoice', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B9'));
        await app.waitForMainLoader();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        await browser.sleep(1000);
        expect(await element(by.xpath('(//input[@placeholder="Invoice#"])[2]')).isDisplayed()).toBeTruthy();
        await inv.SetSummerizedInvoice(inv.readExcelInv(0, 'B6'));
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,5000)');
        const MultiInv = await(element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[3]/span')).getText());
        console.log('MatterRef Selected :: ', MultiInv);
        expect(await element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[3]/span')).getAttribute('title')).toContain(MultiInv);
        await browser.executeScript('window.scrollTo(0,0)');
        await paysrc.clickOnClearAll();
    });
    it('Should Search Invoices Multiple Options', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        await inv.SearchInvoice(inv.readExcelInv(0, 'B7'));
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickonAdvanceSearchOption();
        expect(await $('[placeholder="Matter Ref"]').isDisplayed()).toBeTruthy();
        await inv.clickMatterRefBeginRadioBtn();
        await browser.sleep(1000);
        await inv.MatterRef(inv.readExcelInv(0, 'B8'));
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,1000)');
        const MatterRef = await(element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[13]/div/span[2]')).getText());
        console.log('MatterRef Selected :: ', MatterRef);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//tbody[@role="presentation"]/tr[1]/td[13]/div/span[2]')).getAttribute('title')).toContain(MatterRef);
        await browser.sleep(1000);
        const inv1 = await($$('span.col.no-padding.truncate').get(0).getText());
        console.log('Invoice# Selected :: ', inv1);
        expect(await $$('span.col.no-padding.truncate').get(0).getAttribute('title')).toContain(inv1);
        await browser.executeScript('window.scrollTo(0,0)');
    });
});
