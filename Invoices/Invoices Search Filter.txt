import {element, browser, $, by, $$} from 'protractor';
import { AppPage } from '../app.po';
import { Entity } from '../entitySearch/EntitySearch.po';
import { Invoices } from './invoices.po';
import { PaymentSearch } from '../payment/paymentSearch.po';
const data = require('../app.e2e-test_data.json');
const testEnv = browser.params.environment.env;
const userType = browser.params.user_type.isExternal;

describe('iReceivable Invoices Page: Invoice Search Filter - ', () => {
    let app: AppPage;
    let ent: Entity;
    let inv: Invoices;
    let paysrc: PaymentSearch;
    const sortasc = $('span.k-icon.k-i-sort-asc-sm');
    const sortdesc = $('span.k-icon.k-i-sort-desc-sm');
    beforeAll(async () => {
        app = new AppPage();
        ent = new Entity();
        inv = new Invoices();
        paysrc = new PaymentSearch ();
        await app.appLogin(testEnv, userType);
        await app.waitForUrlToChangeTo('dashboard');
        await app.cancelCustomerOrInvoice();
        await app.waitForMainLoader();
        const linkPayment = element(by.linkText('INVOICES'));
        await app.waitForEcClickable(linkPayment);
        await inv.clickonInvoiceTab();
        console.log('before all completed.');
    });
    afterAll(async () => {
        await app.appLogout();
        });
     beforeEach(async () => {
        await browser.sleep(3000);
        });
    it('Should set the context using Invoice# in Invoice History Page', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(null , inv.readExcelInv(0, 'B13'));
        await app.waitForMainLoader();
        // tslint:disable-next-line:quotemark
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Name);
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Num);
        expect(await element(by.linkText('Summarized Invoicing')).getText()).toContain(data.customersearchresult.Billing_icon);
        expect(await element(by.xpath('//strong[contains(text(),"CURRENCY:")]')).getText()).toContain(data.customersearchresult.Currency);
        expect(await element(by.xpath('//strong[contains(text(),"OFAC: OK")]')).getText()).toContain(data.customersearchresult.OFAC_Status);
        expect(await element(by.xpath('//strong[@class="contact-text"]')).getText()).toContain(data.customersearchresult.Contact);
        expect(await element(by.xpath('//span[@class="csc-tertiary-color-dark-blue-gray"]')).getText()).
        toContain(data.customersearchresult.Email);
        await browser.executeScript('window.scrollTo(0,200)');
        const inv1 = await($$('span.col.no-padding.truncate').get(0).getText());
        console.log('Invoice# Selected :: ', inv1);
        await expect(await $$('span.col.no-padding.truncate').get(0).getAttribute('title')).toContain(inv1);
        await browser.executeScript('window.scrollTo(0,0)');
        await browser.sleep(2000);

    });
    it('Should verify the layout of Search section for CSC users', async () => {
        await app.waitForMainLoader();
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(null , inv.readExcelInv(0, 'B13'));
        await app.waitForMainLoader();
        expect(await element(by.cssContainingText('.alt', 'Invoice#')).getText()).toBe(data.invoice_Layout.Inv);
        expect(await element(by.xpath('//label[contains(text(),"Invoice Status")]')).getText()).toContain(data.invoice_Layout.Inv_Status);
        expect(await element(by.xpath('//label[contains(text(),"Contact Name")]')).getText()).toContain(data.invoice_Layout.cnct);
        expect(await element(by.xpath('//label[contains(text(),"Order#")]')).getText()).toContain(data.invoice_Layout.order);
        expect(await element(by.xpath('//label[contains(text(),"Date Range")]')).getText()).toContain(data.invoice_Layout.dtrange);
        expect(await element(by.xpath('//label[contains(text(),"Service Area")]')).getText()).toContain(data.invoice_Layout.Serv_Area);
        expect (await $$('.radio-label').get(0).getText()).toContain(data.invoice_Layout.radio_lable1);
        expect (await $$('.radio-label').get(1).getText()).toContain(data.invoice_Layout.radio_lable2);
        expect (await $$('.radio-label').get(2).getText()).toContain(data.invoice_Layout.radio_lable3);
        const togglebtn = $('span.k-icon.plusMinus.k-i-plus');
        await app.waitForEcClickable(togglebtn);
        await inv.clickOnAdvncToggleBtn();
        expect(await element(by.xpath('//label[contains(text(),"Entity#")]')).getText()).toContain(data.invoice_Layout.advnc_entity);
        expect(await element(by.xpath('//label[contains(text(),"Project Ref")]')).getText()).toContain(data.invoice_Layout.advnc_pref);
        expect(await element(by.xpath('//label[contains(text(),"Matter Ref")]')).getText()).toContain(data.invoice_Layout.advnc_mref);
        expect(await element(by.xpath('//label[contains(text(),"Summarized Invoice")]')).getText()).
        toContain(data.invoice_Layout.advnc_Summarized_Invoice);
        expect (await $$('.radio-label').get(3).getText()).toContain(data.invoice_Layout.radio_lable1);
        expect (await $$('.radio-label').get(4).getText()).toContain(data.invoice_Layout.radio_lable2);
        expect (await $$('.radio-label').get(5).getText()).toContain(data.invoice_Layout.radio_lable3);

    });
    it('Should Search OFAC Status value is displayed', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        expect(await element(by.xpath('//strong[contains(text(),"OFAC:")]')).getText()).
        toContain(data.customersearchresult.OFAC_Status_Value);
    });
    it('Should Verify the Fields displayed Under Collector Contact in invoice search results', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchresult.Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchresult.Email);
        expect(await element(by.xpath('//span[@class="left-align display-inline-block pl10"]/div')).getText()).
        toContain(data.customersearchresult.Contact_Num);
    });
    it('Should verify Summarized Invoicing option is displayed next to customer name', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(data.customerdetails.ID_internal_default);
        await app.waitForMainLoader();
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await element(by.linkText(data.customersearchresult.Billing_icon)).isDisplayed()).toBeTruthy();
    });
    it('Should filter the search results by setting Invoice Status to Open Current' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Name);
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Num);
        expect(await element(by.xpath('//strong[contains(text(),"OFAC:")]')).getText()).
        toContain(data.customersearchresult.OFAC_Status_Value);
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchresult.Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchresult.Email);
        expect(await element(by.xpath('//span[@class="left-align display-inline-block pl10"]/div')).getText()).toContain(data.customersearchresult.Contact_Num);
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        await browser.sleep(1000);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await inv.ClickOnOpenCurrent();
        expect(await $('button.k-state-active').isDisplayed()).toBeTruthy();
        const chkbox = await element.all(by.className('k-checkbox-label')).count() - 2;
        const opencur = await element.all(by.className('left lime')).count();
        console.log('Total chkbox Count :: ', chkbox);
        console.log('Total Open Current Count :: ', opencur);
        expect(await opencur).toEqual(chkbox);
        await inv.ClickOnOpenCurrent();
        expect(await $('button.k-group-end').isDisplayed()).toBeTruthy();

    });
    it('Should filter the search results by setting Invoice Status to Past Due' , async () => {
        await app.waitForMainLoader();
        await inv.ClickOnPastDue();
        expect(await $('button.k-state-active').isDisplayed()).toBeTruthy();
        const chkbox = await element.all(by.className('k-checkbox-label')).count() - 2;
        const pastdue = await element.all(by.className('left c-i-caution-circle coral')).count();
        console.log('Total chkbox Count :: ', chkbox);
        console.log('Total Open Current Count :: ', pastdue);
        expect(await pastdue).toEqual(chkbox);
        await inv.ClickOnPastDue();

    });
    it('Should filter the search results by setting Invoice Status to Closed' , async () => {
        await inv.ClickOnCloseLabel();
        expect(await $('button.k-state-active').isDisplayed()).toBeTruthy();
        const chkbox = await element.all(by.className('k-checkbox-label')).count() - 2;
        const closed = await element.all(by.className('left c-i-check-reverse')).count();
        console.log('Total chkbox Count :: ', chkbox);
        console.log('Total Open Current Count :: ', closed);
        expect(await closed).toEqual(chkbox);
        await inv.ClickOnCloseLabel();
    });
    it('Should filter the search results by setting Invoice Status to "Closed for Non-payment"' , async () => {
         await inv.ClickOnClosedForNP();
         expect(await $('button.k-state-active').isDisplayed()).toBeTruthy();
         const chkbox = await element.all(by.className('k-checkbox-label')).count() - 2;
         const closNP = await element.all(by.className('left c-i-cancel')).count();
         console.log('Total chkbox Count :: ', chkbox);
         console.log('Total Open Current Count :: ', closNP);
         expect(await closNP).toEqual(chkbox);
    });
    it('Should filter the search results by setting Invoice Status to ALL' , async () => {
        await inv.ClickOnAllLabel();
        expect(await $('button.k-group-start.k-state-active').isDisplayed()).toBeTruthy();
        const chkbox = await element.all(by.className('k-checkbox-label')).count() - 2;
        const rcpt = await element.all(by.className('s8 col no-padding truncate')).count();
        console.log('Total chkbox Count :: ', chkbox);
        console.log('Total Receipt Count :: ', rcpt);
        expect(await rcpt).toEqual(chkbox);
        await browser.executeScript('window.scrollTo(0,10000)');
    });
    it('should filter the search results based on Order#', async () => {
        const orderNo = element(by.xpath('//tbody/tr[1]/td[11]')).getText();
        await element(by.xpath('//td[@ng-reflect-logical-col-index="10"]//input[@type="text"]')).sendKeys(orderNo);
        await browser.sleep(1000);
        expect(element(by.xpath('//tbody/tr[1]/td[11]')).getText()).toContain(orderNo);
    });
    it('should filter the search results based on Matter#', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,10000)');
        const matter = await inv.readExcelInv(0, 'B35');
        // await ent.matter(matter);
        await element(by.xpath('//td[@ng-reflect-logical-col-index="12"]//input[@type="text"]')).sendKeys(matter);
        await browser.sleep(1000);
        expect(element(by.xpath('//tr[@ng-reflect-logical-row-index="2"]//td[13]//div[1]/span[1]')).getText()).toContain(matter);
    });
    // tslint:disable-next-line:max-line-length
    it('Should filter the search results by selecting multiple invoice statuses at the same time from search results heading' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await inv.ClickOnOpenCurrent();
        expect(await $('button.k-state-active').isDisplayed()).toBeTruthy();
        await inv.ClickOnCloseLabel();
        expect(await $$('button.k-state-active').count()).toBe(2);
        const chkbox = await element.all(by.className('k-checkbox-label')).count() - 2;
        const rcpt = await element.all(by.className('s8 col no-padding truncate')).count();
        console.log('Total chkbox Count :: ', chkbox);
        console.log('Total Receipt Count :: ', rcpt);
        await expect(rcpt).toEqual(chkbox);
    });
    it('Should verify default number of invoices displayed per page' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Name);
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Num);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//strong[contains(text(),"OFAC:")]')).getText()).toContain(data.customersearchresult.OFAC_Status_Value);
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchresult.Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchresult.Email);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//span[@class="left-align display-inline-block pl10"]/div')).getText()).toContain(data.customersearchresult.Contact_Num);
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        await browser.sleep(1000);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await $('kendo-pager-page-sizes.k-pager-sizes.k-label').isDisplayed()).toBeTruthy();
        await inv.ClickNumofInvoiceDiplayed();
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//kendo-pager-page-sizes[@class="k-pager-sizes k-label"]/select')).$$('option').count()).toEqual(4);
        expect(await $('a.k-pager-last').isDisplayed()).toBeTruthy();
        await inv.NavigateLastPage();
        const Nav_last = $('a.k-link.k-state-selected');
        await app.waitForEcVisible(Nav_last);
        expect(await $('a.k-link.k-state-selected').getText()).toContain(data.invoice_Layout.Nav_Last_page_Num);
    });
    it('Should verify that User is able to customize the no of invoices that he wants to see on a single page ' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Name);
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Num);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//strong[contains(text(),"OFAC:")]')).getText()).toContain(data.customersearchresult.OFAC_Status_Value);
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchresult.Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchresult.Email);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//span[@class="left-align display-inline-block pl10"]/div')).getText()).toContain(data.customersearchresult.Contact_Num);
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        await browser.sleep(1000);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await $('kendo-pager-page-sizes.k-pager-sizes.k-label').isDisplayed()).toBeTruthy();
        await inv.ClickNumofInvoiceDiplayed();
        expect(await element(by.xpath('//kendo-pager-page-sizes[@class="k-pager-sizes k-label"]/select')).$$('option').count()).toEqual(4);
        await inv.NumofInvoiceDiplayed25();
        expect(await element(by.xpath('//tbody[@role="presentation"]')).$$('tr').count()).toEqual(25);
        await inv.ClickNumofInvoiceDiplayed();
        await inv.NumofInvoiceDiplayed50();
        expect(await element(by.xpath('//tbody[@role="presentation"]')).$$('tr').count()).toEqual(50);
        await inv.ClickNumofInvoiceDiplayed();
        await inv.NumofInvoiceDiplayed75();
        expect(await element(by.xpath('//tbody[@role="presentation"]')).$$('tr').count()).toEqual(75);
        await inv.ClickNumofInvoiceDiplayed();
        await inv.NumofInvoiceDiplayed100();
        expect(await element(by.xpath('//tbody[@role="presentation"]')).$$('tr').count()).toEqual(100);
        expect(await $('a.k-pager-last').isDisplayed()).toBeTruthy();
    });
    it('Should verify the message displayed to user when customer is having more than 1000 invoices' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Name);
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Num);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//strong[contains(text(),"OFAC:")]')).getText()).toContain(data.customersearchresult.OFAC_Status_Value);
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchresult.Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchresult.Email);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//span[@class="left-align display-inline-block pl10"]/div')).getText()).toContain(data.customersearchresult.Contact_Num);
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(1000);
        await inv.clickonInvoiceStatusDropdownAll();
        await browser.sleep(1000);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await $('kendo-pager-page-sizes.k-pager-sizes.k-label').isDisplayed()).toBeTruthy();
        expect(await $('kendo-pager-info.k-pager-info').getText()).toContain(data.customersearchresult.kpagerinfo25);
        await inv.Navigate2ndPage();
        expect(await $('kendo-pager-info.k-pager-info').getText()).toContain(data.customersearchresult.kpagerinfo50);
        await inv.Navigate3rdPage();
        expect(await $('kendo-pager-info.k-pager-info').getText()).toContain(data.customersearchresult.kpagerinfo75);

    });
    it('Should Verify Search Results of Muliple Receipts in Single Invoice' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B20'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchmultrcpt.h1_Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchmultrcpt.h1_email);
        expect(await $('[placeholder="Invoice#"]').isDisplayed()).toBeTruthy();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(2000);
        await inv.clickonInvoiceStatusDropdownAll();
        await browser.sleep(1000);
        await inv.SearchInvoice(inv.readExcelInv(0, 'B21'));
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,10000)');
        expect(await element(by.xpath('//span[@title="Multiple"]')).getText()).toContain(data.customersearchmultrcpt.h1_multi);
        expect(await $('span.k-icon.k-i-plus-circle.cursor-pointer').isDisplayed()).toBeTruthy();
        await inv.ClickMultipleReceiptCursor();
        await browser.sleep(3000);
        expect(await $('span.k-icon.k-i-minus-circle').isDisplayed()).toBeTruthy();
        await inv.ClickOnMultipleReceipt();
        await app.waitForMainLoader();
        await browser.sleep(3000);
        expect(await element(by.xpath('//div[@class="row center"]/strong[1]')).getText()).toContain(data.customersearchmultrcpt.m1pdf_rcpt);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//div[@class="row center"]/strong[2]')).getText()).toContain(data.customersearchmultrcpt.m1_pmnt_type);
        expect(await element(by.xpath('//div[@class="row center"]/strong[3]')).getText()).toContain(data.customersearchmultrcpt.m1_rcpt_amt);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//span[contains(text(),"Applied to Invoice #")]')).getText()).toContain(data.customersearchmultrcpt.m1_ainv);
        expect(await element(by.xpath('//span[contains(text(),"Amount Applied")]')).getText()).toContain(data.customersearchmultrcpt.m1_amtapplied);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//span[contains(text(),"Date Applied")]')).getText()).toContain(data.customersearchmultrcpt.m1_dt_applied);
        expect(await $('#receiptClick-unapplied-value').getText()).toContain(data.customersearchmultrcpt.m1_uamnt);
        await inv.ClickOnMultipleReceiptCloseBtn();
        await browser.executeScript('window.scrollTo(0,0)');
    });
    // tslint:disable-next-line:max-line-length
    it('Should verify that all invoices displayed on a particular page, are selected when user clicks on "Select All Checkbox" at the header' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B20'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchmultrcpt.h1_Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchmultrcpt.h1_email);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await inv.ClickOnSelectAllCheckbox();
        expect(await $$('span.text-lg').get(0).getText()).toContain('Selected Invoices');
        expect(await $$('strong.footer-count').get(0).getText()).toContain('25');
    });
    // tslint:disable-next-line:max-line-length
    it('Should verify that from search results user is able to select and unselect invoice by clicking on respective checkbox' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B20'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchmultrcpt.h1_Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchmultrcpt.h1_email);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await inv.ClickOnSelectInvoiceCheckbox();
        expect(await $$('span.text-lg').get(0).getText()).toContain('Selected Invoices');
        expect(await $$('strong.footer-count').get(0).getText()).toContain('1');
        await inv.ClickOnSelectInvoiceCheckbox();
    });
    it('Should verify the header fields for search results display grid' , async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(app.readExcel(2, 'B2'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Name);
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(data.customersearchresult.Acc_Num);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//strong[contains(text(),"OFAC:")]')).getText()).toContain(data.customersearchresult.OFAC_Status_Value);
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchresult.Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchresult.Email);
        // tslint:disable-next-line:max-line-length
        expect(await element(by.xpath('//span[@class="left-align display-inline-block pl10"]/div')).getText()).toContain(data.customersearchresult.Contact_Num);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        expect(await element(by.xpath('(//*[@class="k-header"])[3]/a')).getText()).toContain(data.invoice_diplay_grid.h1_pinv);
        expect(await element(by.xpath('(//*[@class="k-header"])[4]/a')).getText()).toContain(data.invoice_diplay_grid.h1_inv);
        expect(await element(by.xpath('(//*[@class="k-header"])[5]/a')).getText()).toContain(data.invoice_diplay_grid.h1_rcpt);
        expect(await element(by.xpath('(//*[@class="k-header"])[6]/a')).getText()).toContain(data.invoice_diplay_grid.h1_inv_amnt);
        expect(await element(by.xpath('(//*[@class="k-header"])[7]/a')).getText()).toContain(data.invoice_diplay_grid.h1_amnt_due);
        expect(await element(by.xpath('(//*[@class="k-header"])[8]/a')).getText()).toContain(data.invoice_diplay_grid.h1_inv_dt);
        expect(await element(by.xpath('(//*[@class="k-header"])[9]/a')).getText()).toContain(data.invoice_diplay_grid.h1_due_dt);
        expect(await element(by.xpath('(//*[@class="k-header"])[10]/a')).getText()).toContain(data.invoice_diplay_grid.h1_cnct_name);
        expect(await element(by.xpath('(//*[@class="k-header"])[11]/a')).getText()).toContain(data.invoice_diplay_grid.h1_order);
        expect(await element(by.xpath('(//*[@class="k-header"])[12]/a')).getText()).toContain(data.invoice_diplay_grid.h1_sub);
        expect(await element(by.xpath('(//*[@class="k-header"])[13]/a')).getText()).toContain(data.invoice_diplay_grid.h1_mttr);
    });
    it('should able to filter by Order# when invoice includes multiple Order#, and the number in filter is not the first number on the invoice', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B20'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchmultrcpt.h1_Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchmultrcpt.h1_email);
        expect(await $('[placeholder="Invoice#"]').isDisplayed()).toBeTruthy();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(2000);
        await inv.clickonInvoiceStatusDropdownAll();
        await browser.sleep(1000);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,10000)');
        await element(by.xpath('//td[@ng-reflect-logical-col-index="10"]//input[@type="text"]')).sendKeys(inv.readExcelInv(0, 'B34'));
        await browser.sleep(1000);
        expect(await element(by.xpath('//tbody/tr[1]/td[11]')).getText()).toContain(inv.readExcelInv(0, 'B34'));
        await inv.ClickMultipleReceiptCursor(); // expands the + sign of 1st multiple symbol
        await browser.sleep(1000);
        expect(await $('span.k-icon.k-i-minus-circle').isDisplayed()).toBeTruthy();
        const secondTitle = await element(by.xpath('//span[2]/span[2]/div[2]')).getText(); // title of second
        await console.log('Second Name in the invoice: ', secondTitle);
        await browser.refresh();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,200)');
        await element(by.xpath('//td[@ng-reflect-logical-col-index="10"]//input[@type="text"]')).sendKeys(secondTitle);
        expect(await element(by.xpath('//tbody/tr[1]/td[11]')).getText()).toContain(inv.readExcelInv(0, 'B34'));
        await inv.ClickMultipleReceiptCursor(); // expands the + sign again
        await browser.sleep(1000);
        expect(await $('span.k-icon.k-i-minus-circle').isDisplayed()).toBeTruthy();
        expect(await element(by.xpath('//span[2]/span[2]/div[2]')).getText()).toBe(secondTitle);
    });
    // tslint:disable-next-line:max-line-length
    it('should able to filter by Subject when invoice includes multiple subject names, and the name in filter is not the first name on the invoice', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B20'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchmultrcpt.h1_Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchmultrcpt.h1_email);
        expect(await $('[placeholder="Invoice#"]').isDisplayed()).toBeTruthy();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(2000);
        await inv.clickonInvoiceStatusDropdownAll();
        await browser.sleep(1000);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,10000)');
        await element(by.xpath('//td[@ng-reflect-logical-col-index="11"]//input[@type="text"]')).sendKeys(inv.readExcelInv(0, 'B34'));
        await browser.sleep(1000);
        expect(await element(by.xpath('//tbody/tr[1]/td[12]')).getText()).toContain(inv.readExcelInv(0, 'B34'));
        await inv.ClickMultipleReceiptCursor(); // expands the + sign of 1st multiple symbol
        await browser.sleep(1000);
        expect(await $$('span.k-icon.k-i-minus-circle').get(0).isDisplayed()).toBeTruthy();
        const secondTitle = await element(by.xpath('(//span[2]/span[2]/div[2])[2]')).getText(); // title of second
        await console.log('Second Name in the invoice: ', secondTitle);
        await browser.refresh();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,200)');
        await element(by.xpath('//td[@ng-reflect-logical-col-index="11"]//input[@type="text"]')).sendKeys(secondTitle);
        expect(await element(by.xpath('//tbody/tr[1]/td[12]')).getText()).toContain(inv.readExcelInv(0, 'B34'));
        await inv.ClickMultipleReceiptCursor(); // expands the + sign again
        await browser.sleep(1000);
        expect(await $$('span.k-icon.k-i-minus-circle').get(0).isDisplayed()).toBeTruthy();
        expect(await element(by.xpath('(//span[2]/span[2]/div[2])[2]')).getText()).toBe(secondTitle);
    });
    // tslint:disable-next-line:max-line-length
    it('should able to filter by Matter# when invoice includes multiple subject names, and the name in filter is not the first name on the invoice', async () => {
        await inv.clickgetChangeCustomer();
        expect(await $('app-change-customer').isDisplayed()).toBeTruthy();
        await app.setCustomerOrInvoice(inv.readExcelInv(0, 'B20'));
        await app.waitForMainLoader();
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await element(by.id('collectorInfo-accName-accNumber')).getText()).toContain(inv.readExcelInv(0, 'B20'));
        expect(await $('#change-customer-link2').isDisplayed()).toBeTruthy();
        expect(await $('strong.contact-text').getText()).toContain(data.customersearchmultrcpt.h1_Contact);
        expect(await $('span.csc-tertiary-color-dark-blue-gray').getText()).toContain(data.customersearchmultrcpt.h1_email);
        expect(await $('[placeholder="Invoice#"]').isDisplayed()).toBeTruthy();
        await inv.clickonInvoiceStatusDropdown();
        await browser.sleep(2000);
        await inv.clickonInvoiceStatusDropdownAll();
        await browser.sleep(1000);
        await inv.clickSearchButton();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,10000)');
        await element(by.xpath('//td[@ng-reflect-logical-col-index="12"]//input[@type="text"]')).sendKeys(inv.readExcelInv(0, 'B34'));
        await browser.sleep(1000);
        expect(await element(by.xpath('//tbody/tr[1]/td[13]')).getText()).toContain(inv.readExcelInv(0, 'B34'));
        await inv.ClickMultipleReceiptCursor(); // expands the + sign of 1st multiple symbol
        await browser.sleep(1000);
        expect(await $$('span.k-icon.k-i-minus-circle').get(0).isDisplayed()).toBeTruthy();
        const secondTitle = await element(by.xpath('//span[@class="col s10 no-padding left"]//span[3]/span[2]/span')).getText();
        await console.log('Second Name in the invoice: ', secondTitle);
        await browser.refresh();
        await app.waitForMainLoader();
        await browser.executeScript('window.scrollTo(0,200)');
        await element(by.xpath('//td[@ng-reflect-logical-col-index="12"]//input[@type="text"]')).sendKeys(secondTitle);
        expect(await element(by.xpath('//tbody/tr[1]/td[13]')).getText()).toContain(inv.readExcelInv(0, 'B34'));
        await inv.ClickMultipleReceiptCursor(); // expands the + sign again
        await browser.sleep(1000);
        expect(await $$('span.k-icon.k-i-minus-circle').get(0).isDisplayed()).toBeTruthy();
        expect(await element(by.xpath('//span[@class="col s10 no-padding left"]//span[3]/span[2]/span')).getText()).toBe(secondTitle);
    });
});
